from cister import BaseModel
from sqlalchemy import Column, ForeignKey
from sqlalchemy import Boolean, DECIMAL
from sqlalchemy import Integer
from sqlalchemy import Unicode
from sqlalchemy import TIMESTAMP
from sqlalchemy.orm import relationship
from sqlalchemy.orm import backref
from sqlalchemy.orm import column_property

##Own models
from CISGuild import GuildInfo
from CISGuild import GuildMembership
GuildInfoTable = GuildInfo.__table__
GuildMembershipTable = GuildMembership.__table__

class CISUser(BaseModel):
    __tablename__ = 'cis_users'
    playerid        = Column(Integer, ForeignKey("player.id"), primary_key=True, )
    playervalue     = Column(Unicode(32))
    password        = Column(Unicode(32))
    code            = Column(Unicode(32))
    creation        = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    activated       = Column(Boolean, default=0)
    activated_on    = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    banned          = Column(Boolean, default=0)
    banned_on       = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    last_activity   = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    last_script     = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')
    last_web        = Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

    player = relationship("Player",
        primaryjoin='CISUser.playerid==Player.id',
        join_depth=3,
        lazy='joined')

    guild = relationship("GuildInfo",
        secondary=GuildMembershipTable,
        primaryjoin=playerid==GuildMembershipTable.c.playerid,
        secondaryjoin=GuildMembershipTable.c.guildid==GuildInfoTable.c.id,
        innerjoin=False,
        join_depth=3,
        lazy='joined',
        uselist=False,)
        

class Player(BaseModel):
    __tablename__ = 'player'
    id = Column(Integer, ForeignKey("guildmember.playerid"), primary_key=True)
    name =  Column(Unicode(45))
    level = Column('lvl',DECIMAL(6,2))
    timestamp =  Column(TIMESTAMP, default='CURRENT_TIMESTAMP')

    ##Fleets
    fleets = relationship("Fleet", primaryjoin='Fleet.ownerid==Player.id',lazy='select')
    submittedfleets = relationship("Fleet", primaryjoin='Fleet.submitid==Player.id',lazy='select')
    updatedfleets = relationship("Fleet", primaryjoin='Fleet.updateid==Player.id',lazy='select')

    ##Bases
    ownedbases = relationship("Base", primaryjoin='Base.ownerid==Player.id',lazy='select')
    occupiedbases = relationship("Base", primaryjoin='Base.occupierid==Player.id', lazy='select')

    submittedbases = relationship("Base", primaryjoin='Base.submitid==Player.id', lazy='select')
    updatedbases = relationship("Base", primaryjoin='Base.updateid==Player.id', lazy='select')

    guild = relationship("GuildInfo",
        secondary=GuildMembershipTable,
        primaryjoin=id==GuildMembershipTable.c.playerid,
        secondaryjoin=GuildMembershipTable.c.guildid==GuildInfoTable.c.id,
        innerjoin=False,
        join_depth=3,
        lazy='joined',
        uselist=False,
        backref=backref("members", uselist=False))


#    def __init__(self, id, name,
#                level, timestamp ):
#        self.id = id
#        self.name = name
#        self.level =  level
#        self.timestamp =  timestamp
#


